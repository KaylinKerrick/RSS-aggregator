import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author KaylinKerrick
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Open the html and head tags
        out.println("<html>");
        out.println("<head>");

        //Start with the page's title
        String titleLabel = " ";
        //Find the title's index
        int titleIndex = getChildElement(channel, "title");
        //If the title index exists find the title's label
        if (titleIndex != -1 && channel.child(titleIndex).numberOfChildren() > 0) {
            XMLTree title = channel.child(titleIndex);
            titleLabel = title.child(0).label();
        } else {
            int descriptionIndex = getChildElement(channel, "description");
            if (descriptionIndex != 1
                    && channel.child(descriptionIndex).numberOfChildren() > 0) {
                titleLabel = channel.child(descriptionIndex).child(0).label();
            } else {
                titleLabel = "Empty Title";
            }
        }

        //Close the head tag and open body tag
        out.println("</head>");
        out.println("<body>");

        //Do the same thing with the link if there is one
        String linkLabel = " ";
        int linkIndex = getChildElement(channel, "link");
        if (linkIndex != -1) {
            XMLTree link = channel.child(linkIndex);
            linkLabel = link.child(0).label();
        } else {
            linkLabel = "No Link Found";
        }

        //Now output the url to the link (linkLabel) and the text we want shown (titleLabel)
        out.print("<h1> <a href=\"" + linkLabel + "\">" + titleLabel + "</a> </h1>");

        //Finally do the same with the description if there is one
        String descriptionLabel = " ";
        int descriptionIndex = getChildElement(channel, "description");
        if (descriptionIndex != -1) {
            XMLTree description = channel.child(descriptionIndex);
            descriptionLabel = description.child(0).label();
        } else {
            descriptionLabel = "No Link Found";
        }
        //Print the description
        out.println(" <p> " + descriptionLabel + " </p>");

        //Print out the table with headers
        out.println("<table border=\"1\">");
        out.println("  <tr> ");
        out.print("    <th>Date</th>");
        out.print("    <th>Source</th>");
        out.print("    <th>News</th>");
        out.println("  </tr> ");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Close the table, body, and html tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // Returns -1 if no matches are found
        int index = -1;

        // Loop through all of the children
        for (int i = 0; i < xml.numberOfChildren() && index == -1; i++) {
            XMLTree child = xml.child(i);
            if (child.isTag()) {
                String label = child.label();

                // If the label matches the given tag
                if (label.equals(tag)) {
                    index = i;
                }
            }
        }
        //return the index number of the match found
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Assume these are all false until later proven otherwise
        boolean hasSource = false;
        boolean hasDate = false;
        boolean hasTitle = false;
        boolean hasLink = false;

        //Initialize empty strings for later
        String date = "";
        String source = "";
        String sourceL = "";
        String title = "";
        String link = "";

        // Loop through the number of children item has
        for (int i = 0; i < item.numberOfChildren(); i++) {
            // Create a new subtree each time so it's easier to read
            XMLTree currentItem = item.child(i);

            if (currentItem.label().equals("pubDate")) {
                date = currentItem.child(0).label();
                hasDate = true;
            }
            if (currentItem.label().equals("source")) {
                source = currentItem.child(0).label();
                //There will be a url attribute if source is available
                sourceL = currentItem.attributeValue("url");
                hasSource = true;
            }
            if (currentItem.label().equals("title")) {
                title = currentItem.child(0).label();
                hasTitle = true;
            }
            if (currentItem.label().equals("link")) {
                link = currentItem.child(0).label();
                hasLink = true;
            }
        }

        //After the loop check if these are still false, if they're true output the values
        if (!hasDate) {
            out.println("<td>No data available</td>");
        } else {
            out.println("<td>" + date + "</td>");
        }
        if (!hasSource) {
            out.println("<td>No source available</td>");
        } else {
            out.println("<td><a href=" + sourceL + ">" + source + "</a></td>");
        }
        if (!hasTitle) {
            int descriptionIndex = getChildElement(item, "description");
            if (descriptionIndex != 1
                    && item.child(descriptionIndex).numberOfChildren() > 0) {
                title = item.child(descriptionIndex).child(0).label();
            } else {
                title = "No title available";
            }
        } else if (!hasLink) {
            out.println("<td>" + title + "</td>");
        } else {
            out.println("<td><a href=" + link + ">" + title + "</a></td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree rssFeed = new XMLTree1(url);

        if (rssFeed.label().equals("rss") && rssFeed.hasAttribute("version")
                && rssFeed.attributeValue("version").equals("2.0")) {
            //new SimpleWriter with the file user entered
            SimpleWriter html = new SimpleWriter1L(file);
            //Create channel subtree,first child of the RSS feed
            XMLTree channel = rssFeed.child(0);
            //Call outputHeader method
            outputHeader(channel, html);

            //Loop through all of the channel's children
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                //If there is an item call the processItem method
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), html);
                }
            }
            //Call outputFooter method
            outputFooter(html);
            //close html SimpleWriter
            html.close();
        } else {
            out.println("Please enter a valid RSS 2.0 feed.");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //Ask user for an XML file with multiple RSS links
        out.println("Enter an XML file with URLs to RSS feeds: ");
        String inputedFile = in.nextLine();
        XMLTree feeds = new XMLTree1(inputedFile);

        //Ask user to name an html file to save page to
        out.println("Enter an HTML Output Name: ");
        String htmlFile = in.nextLine();

        //Create new simple writer with the entered file
        SimpleWriter writer = new SimpleWriter1L(htmlFile);

        //Get the feed title and print, make unordered list
        String title = feeds.attributeValue("title");
        writer.println("<html><head><title>" + title + "</title></head><body>");
        writer.println("<h1>" + title + "</h1>");
        writer.println("<ul>");

        // Process each feed given in the XML file
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            XMLTree feed = feeds.child(i);
            String url = feed.attributeValue("url");
            String name = feed.attributeValue("name");
            String file = feed.attributeValue("file");
            //Call the process feed method
            processFeed(url, file, out);

            // Add all the links on the first page to different RSS tables
            writer.println("<li><a href=\"" + file + "\">" + name + "</a></li>");
        }

        // Close simple writer we created
        writer.println("</ul></body></html>");
        writer.close();

        in.close();
        out.close();
    }

}
